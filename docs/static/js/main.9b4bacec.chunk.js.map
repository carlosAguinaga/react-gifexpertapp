{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","className","value","placeholder","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEdC,mBAAS,IAFK,mBAE3CC,EAF2C,KAE/BC,EAF+B,KAmBlD,OACE,0BAAMC,SAZa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,OAQd,2BACEO,KAAK,OACLC,UAAU,eACVC,MAAQV,EACRW,YAAY,SACZC,SAtBoB,SAAET,GAC1BF,EAAcE,EAAEU,OAAOH,Y,uBCRdI,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEfC,EAFe,iDAEkCC,UAAWH,GAF7C,+DAGFI,MAAOF,GAHL,cAGfG,EAHe,gBAIAA,EAAKC,OAJL,uBAIdC,EAJc,EAIdA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAE5B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXjB,kBAedM,GAfc,4CAAH,sDCEPO,EAAc,SAAC,GAAqB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEpC,OACE,yBAAKR,UAAU,4CACb,yBAAKsB,IAAMd,EAAMe,IAAML,IACvB,2BAAKA,KCHEM,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECAb,SAACA,GAAc,IAAD,EAEdhB,mBAAS,CACjCuB,KAAM,GACNY,SAAS,IAJ6B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAuBxC,OAhBAC,qBAAW,WAETvB,EAAQC,GACPuB,MAAM,SAAAb,GAEHW,EAAS,CACPd,KAAMG,EACNS,SAAS,SAKd,CAAEnB,IAIEoB,EDrB2BI,CAAaxB,GAAjCa,EAFyB,EAE/BN,KAAcY,EAFiB,EAEjBA,QAItB,OACE,oCACE,wBAAIzB,UAAU,iDAAkDM,GAC9DmB,GAAW,uBAAGzB,UAAU,8CAAb,WACb,yBAAKA,UAAU,aAEXmB,EAAOJ,KAAK,SAAAC,GAAG,OAAK,kBAAC,EAAD,eAAae,IAAMf,EAAIC,IAAUD,UEZlDgB,EAAe,WAAO,IAAD,EAEI1C,mBAAS,CAAC,cAFd,mBAEzB2C,EAFyB,KAEb5C,EAFa,KAIhC,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEA,4BAEI4C,EAAWlB,KAAK,SAAAT,GAAQ,OACtB,kBAAC,EAAD,CACEyB,IAAMzB,EACNA,SAAWA,U,MCdzB4B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.9b4bacec.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ( { setCategories } ) => {\n\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = ( e ) => {\n    setInputValue(e.target.value);\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategories( cats => [ inputValue, ...cats]);\n      setInputValue('');\n    }\n\n  }\n\n\n  return (\n    <form onSubmit={ handleSubmit }>\n      <input \n        type=\"text\"\n        className=\"input-search\"\n        value={ inputValue }\n        placeholder=\"Buscar\"\n        onChange={ handleInputChange }\n      />\n    </form>\n  )\n\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}","export const getGifs = async( category ) => {\n\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=k9HWi21EPHEPZGFNs5E3HLGglsl3CfXJ`;\n  const resp = await fetch( url );\n  const {data} = await resp.json();\n\n  const gifs = data.map( img => {\n\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    }\n  })\n\n  return gifs;\n\n}","import React from 'react'\n\nexport const GifGridItem = ( { title, url} ) => {\n\n  return (\n    <div className='card animate__animated animate__bounceIn'>\n      <img src={ url } alt={ title } />\n      <p>{ title }</p>\n    </div>\n  )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ( {category} ) => {\n\n  const { data: images, loading } = useFetchGifs(category);\n\n\n\n  return (\n    <>\n      <h3 className=\"card-grid animate__animated animate__bounceIn\">{ category }</h3>\n      { loading && <p className=\"card-grid animate__animated animate__flash\">Loading</p> }\n      <div className=\"card-grid\">\n          { \n          images.map( img =>  <GifGridItem key={ img.id } { ...img } /> )\n          }\n      </div>\n    </>\n  )\n\n}\n","import { useState, useEffect } from \"react\"\nimport {getGifs} from '../helpers/getGifs'\n\n\nexport const useFetchGifs = (category) => {\n\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  });\n\n  useEffect( () => {\n    \n    getGifs(category)\n    .then( img => {\n\n        setState({\n          data: img,\n          loading: false\n        });\n      \n    });\n\n  }, [ category ]);\n\n\n\n  return state; // { data: [], loading: true };\n\n}","import React, { useState } from 'react';\nimport { AddCategory } from './Components/AddCategory';\nimport { GifGrid } from './Components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n  const [categories, setCategories] = useState(['One PUnch']);\n\n  return(\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={ setCategories }/>\n      <hr/>\n\n      <ol>\n        {\n          categories.map( category => (\n            <GifGrid\n              key={ category }\n              category={ category }\n            />\n          ))\n        }\n      </ol>\n    </>\n  );\n\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}